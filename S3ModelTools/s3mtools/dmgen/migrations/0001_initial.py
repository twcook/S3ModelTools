# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-04-11 12:31
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import dmgen.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Attestation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='A human readable label used to identify this model in DMGEN.', max_length=110, verbose_name='label')),
                ('ct_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this MC.', unique=True, verbose_name='UUID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The dateTime that the MC was created.', verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update.', verbose_name='last updated')),
                ('published', models.BooleanField(default=False, help_text='Published must be a green check icon in order to use this in a DM. This is not user editable. It is managed by the publication process.', verbose_name='published')),
                ('description', models.TextField(help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the MC.', null=True, verbose_name='description')),
                ('schema_code', models.TextField(blank=True, default='', help_text='This is only writable from the DMGEN, not via user input. It contains the code required for each component to create an entry in a DM.', null=True, verbose_name='Schema Code')),
                ('asserts', models.TextField(blank=True, default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.', null=True, verbose_name='asserts')),
                ('lang', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='Choose the language of this MC.', max_length=40, verbose_name='language')),
            ],
            options={
                'verbose_name': 'Attestation',
                'ordering': ['project', 'label'],
            },
        ),
        migrations.CreateModel(
            name='Audit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='A human readable label used to identify this model in DMGEN.', max_length=110, verbose_name='label')),
                ('ct_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this MC.', unique=True, verbose_name='UUID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The dateTime that the MC was created.', verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update.', verbose_name='last updated')),
                ('published', models.BooleanField(default=False, help_text='Published must be a green check icon in order to use this in a DM. This is not user editable. It is managed by the publication process.', verbose_name='published')),
                ('description', models.TextField(help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the MC.', null=True, verbose_name='description')),
                ('schema_code', models.TextField(blank=True, default='', help_text='This is only writable from the DMGEN, not via user input. It contains the code required for each component to create an entry in a DM.', null=True, verbose_name='Schema Code')),
                ('asserts', models.TextField(blank=True, default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.', null=True, verbose_name='asserts')),
                ('lang', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='Choose the language of this MC.', max_length=40, verbose_name='language')),
            ],
            options={
                'verbose_name': 'Audit',
                'verbose_name_plural': 'Audits',
                'ordering': ['project', 'label'],
            },
        ),
        migrations.CreateModel(
            name='Cluster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='A human readable label used to identify this model in DMGEN.', max_length=110, verbose_name='label')),
                ('ct_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this MC.', unique=True, verbose_name='UUID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The dateTime that the MC was created.', verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update.', verbose_name='last updated')),
                ('published', models.BooleanField(default=False, help_text='Published must be a green check icon in order to use this in a DM. This is not user editable. It is managed by the publication process.', verbose_name='published')),
                ('description', models.TextField(help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the MC.', null=True, verbose_name='description')),
                ('schema_code', models.TextField(blank=True, default='', help_text='This is only writable from the DMGEN, not via user input. It contains the code required for each component to create an entry in a DM.', null=True, verbose_name='Schema Code')),
                ('asserts', models.TextField(blank=True, default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.', null=True, verbose_name='asserts')),
                ('lang', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='Choose the language of this MC.', max_length=40, verbose_name='language')),
                ('clusters', models.ManyToManyField(blank=True, help_text='Select zero or more Clusters to include in this Cluster. You cannot put a Cluster inside itself, it will be ignored if you select itself.', to='dmgen.Cluster')),
            ],
            options={
                'verbose_name': 'Cluster',
                'ordering': ['label'],
            },
        ),
        migrations.CreateModel(
            name='DM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ct_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='The unique identifier for the DM.', unique=True, verbose_name='UUID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The dateTime that the MC was created.', verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update.', verbose_name='last updated')),
                ('published', models.BooleanField(default=False, help_text='Once this <em>Published</em> box has been checked, DM generation has been completed and no further edits are allowed.', verbose_name='Generated')),
                ('about', models.CharField(default='http://dmgen.s3model.com/dmlib/', help_text="The URL to the DM after publication. The DM ID will be added after the trailing slash in the format of 'ccd-{ccd_id}.xsd' This provides a full path and filename for the ccd as a unique identifier.", max_length=255, verbose_name='about')),
                ('title', models.CharField(help_text='Enter the name of this Data Model (DM).', max_length=255, unique=True, verbose_name='title')),
                ('subject', models.CharField(help_text='Enter a semi-colon separated list of keywords. Usually MeSH terms', max_length=255, verbose_name='subject')),
                ('source', models.CharField(help_text='Enter the name of a document or a URL to a supporting source.', max_length=255, verbose_name='source')),
                ('rights', models.CharField(default='CC-BY http://creativecommons.org/licenses/by/3.0/', help_text='Enter the rights or license statement.', max_length=255, verbose_name='rights')),
                ('relation', models.CharField(default='None', help_text='Enter the relationship to another Data Model (DM), if applicable.', max_length=255, verbose_name='relation')),
                ('coverage', models.CharField(default='Universal', help_text='Enter the demographic, geographical or political coverage.', max_length=255, verbose_name='coverage')),
                ('dc_type', models.CharField(default='MLHIM Data Model (DM)', editable=False, max_length=110, verbose_name='type')),
                ('identifier', models.CharField(default='ccd-', editable=False, max_length=110, verbose_name='identifier')),
                ('description', models.TextField(help_text='Enter a general description of the purpose of this DM.', verbose_name='description')),
                ('publisher', models.CharField(help_text='Enter the name of the publisher/copyright holder.', max_length=255, verbose_name='publisher')),
                ('pub_date', models.DateTimeField(auto_now=True, help_text='Date of publication.', verbose_name='date of publication')),
                ('dc_format', models.CharField(default='text/xml', editable=False, help_text='The format of the data. Default is text/xml for DMs.', max_length=8, verbose_name='format')),
                ('dc_language', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='The written language of the DM.', max_length=6, verbose_name='language')),
                ('asserts', models.TextField(blank=True, help_text='XPath assert statements. See the documentation for details. One per line.', verbose_name='asserts')),
                ('schema_code', models.TextField(blank=True, help_text='This is only writable from the DMGEN, not via user input. It contains the code required for each component to create an entry in a DM.', null=True, verbose_name='Schema Code')),
                ('doc_code', models.TextField(blank=True, help_text='This is only writable from the DMGEN, not via user input. It contains the HTML code to document the DM.', null=True, verbose_name='Documentation Code')),
                ('xsd_file', models.FileField(blank=True, max_length=2048, null=True, upload_to=dmgen.models.dm_folder, verbose_name='DM XSD Schema')),
                ('xml_file', models.FileField(blank=True, max_length=2048, null=True, upload_to=dmgen.models.dm_folder, verbose_name='DM XML Instance')),
                ('json_file', models.FileField(blank=True, max_length=2048, null=True, upload_to=dmgen.models.dm_folder, verbose_name='DM JSON Instance')),
                ('html_file', models.FileField(blank=True, max_length=2048, null=True, upload_to=dmgen.models.dm_folder, verbose_name='DM HTML Form')),
                ('sha1_file', models.FileField(blank=True, max_length=2048, null=True, upload_to=dmgen.models.dm_folder, verbose_name='DM SHA1')),
                ('zip_file', models.FileField(blank=True, max_length=2048, null=True, upload_to='zips/', verbose_name='DM Zip')),
            ],
            options={
                'verbose_name': 'DM',
                'ordering': ['project', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='A human readable label used to identify this model in DMGEN.', max_length=110, verbose_name='label')),
                ('ct_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this MC.', unique=True, verbose_name='UUID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The dateTime that the MC was created.', verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update.', verbose_name='last updated')),
                ('published', models.BooleanField(default=False, help_text='Published must be a green check icon in order to use this in a DM. This is not user editable. It is managed by the publication process.', verbose_name='published')),
                ('description', models.TextField(help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the MC.', null=True, verbose_name='description')),
                ('schema_code', models.TextField(blank=True, default='', help_text='This is only writable from the DMGEN, not via user input. It contains the code required for each component to create an entry in a DM.', null=True, verbose_name='Schema Code')),
                ('asserts', models.TextField(blank=True, default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.', null=True, verbose_name='asserts')),
                ('lang', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='Choose the language of this MC.', max_length=40, verbose_name='language')),
                ('language', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='Choose the language of this Entry.', max_length=40, verbose_name='language')),
                ('encoding', models.CharField(default='utf-8', help_text="<a href='http://www.iana.org/assignments/character-sets/character-sets.txt'>List of encoding types at IANA.</a>", max_length=10, verbose_name='encoding')),
                ('state', models.CharField(blank=True, help_text='The current state according to the state machine / workflow engine identified in workflow_id. You may enter a default/start state here.', max_length=110, verbose_name='current state')),
                ('attestation', models.ForeignKey(blank=True, help_text='An attestation that this Entry is correct.', null=True, on_delete=django.db.models.deletion.CASCADE, to='dmgen.Attestation', verbose_name='attestation')),
                ('audit', models.ForeignKey(blank=True, help_text='Audit structure to provide audit trail tracking of information.', null=True, on_delete=django.db.models.deletion.CASCADE, to='dmgen.Audit', verbose_name='audit')),
            ],
            options={
                'verbose_name': 'Entry',
                'ordering': ['project', 'label'],
            },
        ),
        migrations.CreateModel(
            name='Modeler',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the author name as it should appear in DM metadata.', max_length=110, verbose_name='Name')),
                ('email', models.EmailField(help_text='Enter the author email address as it should appear in DM metadata.', max_length=110, verbose_name='Email')),
                ('prj_filter', models.BooleanField(default=True, help_text='Uncheck this box if want to see choices from all projects.Note that this will very likely have a negative impact on performance.', verbose_name='Filter by Project')),
            ],
            options={
                'verbose_name': 'Modeler',
                'verbose_name_plural': 'Modelers',
                'ordering': ['name', 'email'],
            },
        ),
        migrations.CreateModel(
            name='NS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abbrev', models.CharField(help_text='Enter a valid namesspace abbreviation.', max_length=15, verbose_name='NS Abbreviation')),
                ('uri', models.CharField(help_text='Enter a valid namesspace URI.', max_length=1024, verbose_name='NS URI')),
            ],
            options={
                'verbose_name': 'Namespace',
                'verbose_name_plural': 'Namespaces',
            },
        ),
        migrations.CreateModel(
            name='Participation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='A human readable label used to identify this model in DMGEN.', max_length=110, verbose_name='label')),
                ('ct_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this MC.', unique=True, verbose_name='UUID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The dateTime that the MC was created.', verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update.', verbose_name='last updated')),
                ('published', models.BooleanField(default=False, help_text='Published must be a green check icon in order to use this in a DM. This is not user editable. It is managed by the publication process.', verbose_name='published')),
                ('description', models.TextField(help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the MC.', null=True, verbose_name='description')),
                ('schema_code', models.TextField(blank=True, default='', help_text='This is only writable from the DMGEN, not via user input. It contains the code required for each component to create an entry in a DM.', null=True, verbose_name='Schema Code')),
                ('asserts', models.TextField(blank=True, default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.', null=True, verbose_name='asserts')),
                ('lang', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='Choose the language of this MC.', max_length=40, verbose_name='language')),
                ('creator', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='participation_related_creator', to='dmgen.Modeler', verbose_name='Creator')),
                ('edited_by', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='participation_related_edited_by', to='dmgen.Modeler', verbose_name='Last Edited By')),
            ],
            options={
                'verbose_name': 'Participation',
                'ordering': ['project', 'label'],
            },
        ),
        migrations.CreateModel(
            name='Party',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='A human readable label used to identify this model in DMGEN.', max_length=110, verbose_name='label')),
                ('ct_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this MC.', unique=True, verbose_name='UUID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The dateTime that the MC was created.', verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update.', verbose_name='last updated')),
                ('published', models.BooleanField(default=False, help_text='Published must be a green check icon in order to use this in a DM. This is not user editable. It is managed by the publication process.', verbose_name='published')),
                ('description', models.TextField(help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the MC.', null=True, verbose_name='description')),
                ('schema_code', models.TextField(blank=True, default='', help_text='This is only writable from the DMGEN, not via user input. It contains the code required for each component to create an entry in a DM.', null=True, verbose_name='Schema Code')),
                ('asserts', models.TextField(blank=True, default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.', null=True, verbose_name='asserts')),
                ('lang', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='Choose the language of this MC.', max_length=40, verbose_name='language')),
                ('creator', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='party_related_creator', to='dmgen.Modeler', verbose_name='Creator')),
                ('details', models.ForeignKey(blank=True, help_text='A Cluster structure that defines the details of this Party.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='party_related', to='dmgen.Cluster', verbose_name='details')),
                ('edited_by', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='party_related_edited_by', to='dmgen.Modeler', verbose_name='Last Edited By')),
            ],
            options={
                'verbose_name': 'Party',
                'ordering': ['project', 'label'],
            },
        ),
        migrations.CreateModel(
            name='Predicate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_name', models.CharField(help_text='Enter a valid classname from the vocabulary.', max_length=30, verbose_name='Classname')),
                ('ns_abbrev', models.ForeignKey(help_text='Select a valid namesspace abbreviation.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.NS', verbose_name='NS Abbreviation')),
            ],
            options={
                'verbose_name': 'Predicate',
                'verbose_name_plural': 'Predicates',
                'ordering': ['ns_abbrev', 'class_name'],
            },
        ),
        migrations.CreateModel(
            name='PredObj',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('po_name', models.CharField(blank=True, default='', help_text='Enter a human readable name for this Predicate/URI combination. This is only used to aide selection, it is not part of the PCM semantics.', max_length=100, verbose_name='Name')),
                ('object_uri', models.CharField(blank=True, default='', help_text='Enter an IRI for the object of the RDF triple.', max_length=2000, verbose_name='Object URI')),
                ('predicate', models.ForeignKey(blank=True, help_text='Select a predicate to define the RDF triple.', null=True, on_delete=django.db.models.deletion.CASCADE, to='dmgen.Predicate', verbose_name='Predicate')),
            ],
            options={
                'verbose_name': 'RDF Object',
                'verbose_name_plural': 'RDF Objects',
                'ordering': ['project', 'po_name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prj_name', models.CharField(db_index=True, help_text='Enter the name of your project.', max_length=110, unique=True, verbose_name='project name')),
                ('description', models.TextField(blank=True, help_text='Enter a description or explaination of an acronym of the project.', verbose_name='project description')),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
                'ordering': ['prj_name'],
            },
        ),
        migrations.CreateModel(
            name='ReferenceRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='A human readable label used to identify this model in DMGEN.', max_length=110, verbose_name='label')),
                ('ct_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this MC.', unique=True, verbose_name='UUID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The dateTime that the MC was created.', verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update.', verbose_name='last updated')),
                ('published', models.BooleanField(default=False, help_text='Published must be a green check icon in order to use this in a DM. This is not user editable. It is managed by the publication process.', verbose_name='published')),
                ('description', models.TextField(help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the MC.', null=True, verbose_name='description')),
                ('schema_code', models.TextField(blank=True, default='', help_text='This is only writable from the DMGEN, not via user input. It contains the code required for each component to create an entry in a DM.', null=True, verbose_name='Schema Code')),
                ('asserts', models.TextField(blank=True, default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.', null=True, verbose_name='asserts')),
                ('lang', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='Choose the language of this MC.', max_length=40, verbose_name='language')),
                ('adapter_ctid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific XdAdapter complexType.', unique=True, verbose_name='Adapter UUID')),
                ('require_vtb', models.BooleanField(default=False, help_text='Check this box to require a Valid Time Begin element.', verbose_name='Require Valid Time Begin?')),
                ('require_vte', models.BooleanField(default=False, help_text='Check this box to require a Valid Time End element.', verbose_name='Require Valid Time End?')),
                ('require_tr', models.BooleanField(default=False, help_text='Check this box to require a Date & Time Recorded element.', verbose_name='Require Time Recorded?')),
                ('require_mod', models.BooleanField(default=False, help_text='Check this box to require a Date & Time for last modified element.', verbose_name='Require Time Modified?')),
                ('definition', models.CharField(help_text="Enter the term that indicates the status of this range, e.g. 'normal', 'critical', 'therapeutic' etc.", max_length=110, verbose_name='Definition')),
                ('is_normal', models.BooleanField(default=False, help_text='Is this considered the normal range?', verbose_name='Is Normal?')),
                ('creator', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='referencerange_related_creator', to='dmgen.Modeler', verbose_name='Creator')),
                ('edited_by', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='referencerange_related_edited_by', to='dmgen.Modeler', verbose_name='Last Edited By')),
            ],
            options={
                'verbose_name': 'ReferenceRange',
                'ordering': ['project', 'label'],
            },
        ),
        migrations.CreateModel(
            name='SimpleReferenceRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='A human readable label used to identify this model in DMGEN.', max_length=110, verbose_name='label')),
                ('ct_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this MC.', unique=True, verbose_name='UUID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The dateTime that the MC was created.', verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update.', verbose_name='last updated')),
                ('published', models.BooleanField(default=False, help_text='Published must be a green check icon in order to use this in a DM. This is not user editable. It is managed by the publication process.', verbose_name='published')),
                ('description', models.TextField(help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the MC.', null=True, verbose_name='description')),
                ('schema_code', models.TextField(blank=True, default='', help_text='This is only writable from the DMGEN, not via user input. It contains the code required for each component to create an entry in a DM.', null=True, verbose_name='Schema Code')),
                ('asserts', models.TextField(blank=True, default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.', null=True, verbose_name='asserts')),
                ('lang', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='Choose the language of this MC.', max_length=40, verbose_name='language')),
                ('adapter_ctid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific XdAdapter complexType.', unique=True, verbose_name='Adapter UUID')),
                ('require_vtb', models.BooleanField(default=False, help_text='Check this box to require a Valid Time Begin element.', verbose_name='Require Valid Time Begin?')),
                ('require_vte', models.BooleanField(default=False, help_text='Check this box to require a Valid Time End element.', verbose_name='Require Valid Time End?')),
                ('require_tr', models.BooleanField(default=False, help_text='Check this box to require a Date & Time Recorded element.', verbose_name='Require Time Recorded?')),
                ('require_mod', models.BooleanField(default=False, help_text='Check this box to require a Date & Time for last modified element.', verbose_name='Require Time Modified?')),
                ('definition', models.CharField(help_text="Enter the term that indicates the status of this range, e.g. 'normal', 'critical', 'therapeutic' etc.", max_length=110, verbose_name='Definition')),
                ('lower', models.CharField(blank=True, help_text='Enter the lower value of the interval. This will be used to set the minInclusive facet.', max_length=110, null=True, verbose_name='Lower Value')),
                ('upper', models.CharField(blank=True, help_text='Enter the upper value of the interval. This will be used to set the maxInclusive facet.', max_length=110, null=True, verbose_name='Upper Value')),
                ('interval_type', models.CharField(choices=[('None', 'Select Type:'), ('int', 'Count data (xs:int)'), ('decimal', 'Real set numbers (xs:decimal)'), ('float', 'Floating Point (xs:float)'), ('dateTime', 'Date/Time (YYYY-MM-DDTHH:mm:ss)'), ('date', 'Date (YYYY-MM-DD)'), ('time', 'Time (HH:mm:ss)'), ('duration', 'Duration (xs:duration)')], default='Select Type:', help_text='The XML Schema datatype of the upper and lower values.', max_length=20, verbose_name='Interval Type')),
                ('lower_included', models.BooleanField(default=True, help_text='Uncheck this box if the lower value is excluded in the interval', verbose_name='Lower Included?')),
                ('upper_included', models.BooleanField(default=True, help_text='Uncheck this box if the upper value is excluded in the interval', verbose_name='Upper Included?')),
                ('lower_bounded', models.BooleanField(default=True, help_text="Uncheck this box if the lower value is unbounded. If unchecked, instances must be set to xsi:nil='true'", verbose_name='Lower Bounded?')),
                ('upper_bounded', models.BooleanField(default=True, help_text="Uncheck this box if the lower value is unbounded. If unchecked, instances must be set to xsi:nil='true'", verbose_name='Upper Bounded?')),
                ('units_name', models.CharField(blank=True, help_text='OPTIONAL: Enter the common name or abbreviation for these units.', max_length=60, null=True, verbose_name='Units Name')),
                ('units_uri', models.URLField(blank=True, help_text='Enter the URL pointing to the definition for these units. This is mandatory if you entered a Units Name.', max_length=2000, null=True, verbose_name='Units URI')),
                ('is_normal', models.BooleanField(default=False, help_text='Is this considered the normal range?', verbose_name='Is Normal?')),
                ('creator', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='simplereferencerange_related_creator', to='dmgen.Modeler', verbose_name='Creator')),
                ('edited_by', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='simplereferencerange_related_edited_by', to='dmgen.Modeler', verbose_name='Last Edited By')),
                ('pred_obj', models.ManyToManyField(help_text='Select or create a new set of Predicate Object combinations as semantic links.', to='dmgen.PredObj', verbose_name='Predicate - Object')),
                ('project', models.ForeignKey(help_text='Choose the name of your Project.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='Project Name')),
            ],
            options={
                'verbose_name': 'ReferenceRange (Simple)',
                'verbose_name_plural': 'ReferenceRanges (Simple)',
                'ordering': ['project', 'label'],
            },
        ),
        migrations.CreateModel(
            name='Units',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='A human readable label used to identify this model in DMGEN.', max_length=110, verbose_name='label')),
                ('ct_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this MC.', unique=True, verbose_name='UUID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The dateTime that the MC was created.', verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update.', verbose_name='last updated')),
                ('published', models.BooleanField(default=False, help_text='Published must be a green check icon in order to use this in a DM. This is not user editable. It is managed by the publication process.', verbose_name='published')),
                ('description', models.TextField(help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the MC.', null=True, verbose_name='description')),
                ('schema_code', models.TextField(blank=True, default='', help_text='This is only writable from the DMGEN, not via user input. It contains the code required for each component to create an entry in a DM.', null=True, verbose_name='Schema Code')),
                ('asserts', models.TextField(blank=True, default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.', null=True, verbose_name='asserts')),
                ('lang', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='Choose the language of this MC.', max_length=40, verbose_name='language')),
                ('adapter_ctid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific XdAdapter complexType.', unique=True, verbose_name='Adapter UUID')),
                ('require_vtb', models.BooleanField(default=False, help_text='Check this box to require a Valid Time Begin element.', verbose_name='Require Valid Time Begin?')),
                ('require_vte', models.BooleanField(default=False, help_text='Check this box to require a Valid Time End element.', verbose_name='Require Valid Time End?')),
                ('require_tr', models.BooleanField(default=False, help_text='Check this box to require a Date & Time Recorded element.', verbose_name='Require Time Recorded?')),
                ('require_mod', models.BooleanField(default=False, help_text='Check this box to require a Date & Time for last modified element.', verbose_name='Require Time Modified?')),
                ('min_length', models.IntegerField(blank=True, help_text='Enter the minimum number of characters that are required for this concept. If the character is optional, leave it blank.', null=True, verbose_name='minimum length')),
                ('max_length', models.IntegerField(blank=True, help_text='Enter the maximum number of characters that are required for this concept. If the character is optional, leave it blank.', null=True, verbose_name='maximum length')),
                ('exact_length', models.IntegerField(blank=True, help_text='Enter the exact length of the concept. It should be defined only when the number of characters is always fixed (e.g. codes and identifiers).', null=True, verbose_name='exact length')),
                ('enums', models.TextField(help_text='Enter the abbreviations or symbols for allowed units designations. One per line.', verbose_name='Symbols')),
                ('def_val', models.CharField(blank=True, help_text="Enter a default value (up to 255 characters) for the string if desired. Cannot contain 'http://' nor 'https://'", max_length=255, verbose_name='default value')),
                ('definitions', models.TextField(help_text='Enter a URI for each symbol. One per line. These are used as rdf:isDefinedBy in the semantics. If the same URI is to be used for all symbols then enter it on the first line only.', verbose_name='Symbol definitions')),
                ('creator', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='units_related_creator', to='dmgen.Modeler', verbose_name='Creator')),
                ('edited_by', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='units_related_edited_by', to='dmgen.Modeler', verbose_name='Last Edited By')),
                ('pred_obj', models.ManyToManyField(help_text='Select or create a new set of Predicate Object combinations as semantic links.', to='dmgen.PredObj', verbose_name='Predicate - Object')),
                ('project', models.ForeignKey(help_text='Choose the name of your Project.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='Project Name')),
            ],
            options={
                'verbose_name': 'Units',
                'verbose_name_plural': 'Units',
                'ordering': ['project', 'label'],
            },
        ),
        migrations.CreateModel(
            name='XdBoolean',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='A human readable label used to identify this model in DMGEN.', max_length=110, verbose_name='label')),
                ('ct_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this MC.', unique=True, verbose_name='UUID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The dateTime that the MC was created.', verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update.', verbose_name='last updated')),
                ('published', models.BooleanField(default=False, help_text='Published must be a green check icon in order to use this in a DM. This is not user editable. It is managed by the publication process.', verbose_name='published')),
                ('description', models.TextField(help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the MC.', null=True, verbose_name='description')),
                ('schema_code', models.TextField(blank=True, default='', help_text='This is only writable from the DMGEN, not via user input. It contains the code required for each component to create an entry in a DM.', null=True, verbose_name='Schema Code')),
                ('asserts', models.TextField(blank=True, default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.', null=True, verbose_name='asserts')),
                ('lang', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='Choose the language of this MC.', max_length=40, verbose_name='language')),
                ('adapter_ctid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific XdAdapter complexType.', unique=True, verbose_name='Adapter UUID')),
                ('require_vtb', models.BooleanField(default=False, help_text='Check this box to require a Valid Time Begin element.', verbose_name='Require Valid Time Begin?')),
                ('require_vte', models.BooleanField(default=False, help_text='Check this box to require a Valid Time End element.', verbose_name='Require Valid Time End?')),
                ('require_tr', models.BooleanField(default=False, help_text='Check this box to require a Date & Time Recorded element.', verbose_name='Require Time Recorded?')),
                ('require_mod', models.BooleanField(default=False, help_text='Check this box to require a Date & Time for last modified element.', verbose_name='Require Time Modified?')),
                ('trues', models.TextField(help_text="Enter the set of values that are Boolean TRUEs. For instance, if this is a 'Yes/No' type of concept, usually the 'Yes' is a Boolean TRUE. Enter one per line.", verbose_name='true values')),
                ('falses', models.TextField(help_text="Enter the set of values that are Boolean FALSEs. For instance, if this is a 'Yes/No' type of concept, usually the 'No' is a Boolean FALSE. Enter one per line.", verbose_name='false values')),
                ('creator', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='xdboolean_related_creator', to='dmgen.Modeler', verbose_name='Creator')),
                ('edited_by', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='xdboolean_related_edited_by', to='dmgen.Modeler', verbose_name='Last Edited By')),
                ('pred_obj', models.ManyToManyField(help_text='Select or create a new set of Predicate Object combinations as semantic links.', to='dmgen.PredObj', verbose_name='Predicate - Object')),
                ('project', models.ForeignKey(help_text='Choose the name of your Project.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='Project Name')),
            ],
            options={
                'verbose_name': 'Boolean',
                'verbose_name_plural': 'Booleans',
                'ordering': ['project', 'label'],
            },
        ),
        migrations.CreateModel(
            name='XdCount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='A human readable label used to identify this model in DMGEN.', max_length=110, verbose_name='label')),
                ('ct_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this MC.', unique=True, verbose_name='UUID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The dateTime that the MC was created.', verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update.', verbose_name='last updated')),
                ('published', models.BooleanField(default=False, help_text='Published must be a green check icon in order to use this in a DM. This is not user editable. It is managed by the publication process.', verbose_name='published')),
                ('description', models.TextField(help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the MC.', null=True, verbose_name='description')),
                ('schema_code', models.TextField(blank=True, default='', help_text='This is only writable from the DMGEN, not via user input. It contains the code required for each component to create an entry in a DM.', null=True, verbose_name='Schema Code')),
                ('asserts', models.TextField(blank=True, default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.', null=True, verbose_name='asserts')),
                ('lang', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='Choose the language of this MC.', max_length=40, verbose_name='language')),
                ('adapter_ctid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific XdAdapter complexType.', unique=True, verbose_name='Adapter UUID')),
                ('require_vtb', models.BooleanField(default=False, help_text='Check this box to require a Valid Time Begin element.', verbose_name='Require Valid Time Begin?')),
                ('require_vte', models.BooleanField(default=False, help_text='Check this box to require a Valid Time End element.', verbose_name='Require Valid Time End?')),
                ('require_tr', models.BooleanField(default=False, help_text='Check this box to require a Date & Time Recorded element.', verbose_name='Require Time Recorded?')),
                ('require_mod', models.BooleanField(default=False, help_text='Check this box to require a Date & Time for last modified element.', verbose_name='Require Time Modified?')),
                ('normal_status', models.CharField(blank=True, help_text='Enter text that indicates a normal status. Example: This should be a Symbol in a XdOrdinal, a date range in a XdTemporal, a value range in a XdCount, etc.', max_length=110, null=True, verbose_name='normal status')),
                ('min_magnitude', models.DecimalField(blank=True, decimal_places=5, help_text="The minimum allowed value for a magnitude. If there isn't a min. then leave blank.", max_digits=10, null=True, verbose_name='minimum magnitude')),
                ('max_magnitude', models.DecimalField(blank=True, decimal_places=5, help_text="Any maximum allowed value. If there isn't a max. then leave blank.", max_digits=10, null=True, verbose_name='maximum magnitude')),
                ('min_inclusive', models.DecimalField(blank=True, decimal_places=5, help_text='Enter the minimum (inclusive) value for this concept.', max_digits=10, null=True, verbose_name='minimum inclusive')),
                ('max_inclusive', models.DecimalField(blank=True, decimal_places=5, help_text='Enter the maximum (inclusive) value for this concept.', max_digits=10, null=True, verbose_name='maximum inclusive')),
                ('min_exclusive', models.DecimalField(blank=True, decimal_places=5, help_text='Enter the minimum (exclusive) value for this concept.', max_digits=10, null=True, verbose_name='minimum exclusive')),
                ('max_exclusive', models.DecimalField(blank=True, decimal_places=5, help_text='Enter the maximum (exclusive) value for this concept.', max_digits=10, null=True, verbose_name='maximum exclusive')),
                ('total_digits', models.IntegerField(blank=True, help_text='Enter the maximum number of digits for this concept, excluding the decimal separator and the decimal places.', null=True, verbose_name='total digits')),
                ('creator', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='xdcount_related_creator', to='dmgen.Modeler', verbose_name='Creator')),
                ('edited_by', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='xdcount_related_edited_by', to='dmgen.Modeler', verbose_name='Last Edited By')),
                ('pred_obj', models.ManyToManyField(help_text='Select or create a new set of Predicate Object combinations as semantic links.', to='dmgen.PredObj', verbose_name='Predicate - Object')),
                ('project', models.ForeignKey(help_text='Choose the name of your Project.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='Project Name')),
                ('reference_ranges', models.ManyToManyField(blank=True, help_text='Select the appropriate ReferenceRange that defines each ordered value. The listing is by Project: Reference Range Name.', to='dmgen.ReferenceRange', verbose_name='reference ranges')),
                ('simple_rr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dmgen.SimpleReferenceRange', verbose_name='Reference Range (Simple)')),
                ('units', models.ForeignKey(help_text='Choose a units of measurement of this concept.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='xdcount_related_units', to='dmgen.Units', verbose_name='units')),
            ],
            options={
                'verbose_name': 'Count',
                'ordering': ['project', 'label'],
            },
        ),
        migrations.CreateModel(
            name='XdFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='A human readable label used to identify this model in DMGEN.', max_length=110, verbose_name='label')),
                ('ct_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this MC.', unique=True, verbose_name='UUID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The dateTime that the MC was created.', verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update.', verbose_name='last updated')),
                ('published', models.BooleanField(default=False, help_text='Published must be a green check icon in order to use this in a DM. This is not user editable. It is managed by the publication process.', verbose_name='published')),
                ('description', models.TextField(help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the MC.', null=True, verbose_name='description')),
                ('schema_code', models.TextField(blank=True, default='', help_text='This is only writable from the DMGEN, not via user input. It contains the code required for each component to create an entry in a DM.', null=True, verbose_name='Schema Code')),
                ('asserts', models.TextField(blank=True, default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.', null=True, verbose_name='asserts')),
                ('lang', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='Choose the language of this MC.', max_length=40, verbose_name='language')),
                ('adapter_ctid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific XdAdapter complexType.', unique=True, verbose_name='Adapter UUID')),
                ('require_vtb', models.BooleanField(default=False, help_text='Check this box to require a Valid Time Begin element.', verbose_name='Require Valid Time Begin?')),
                ('require_vte', models.BooleanField(default=False, help_text='Check this box to require a Valid Time End element.', verbose_name='Require Valid Time End?')),
                ('require_tr', models.BooleanField(default=False, help_text='Check this box to require a Date & Time Recorded element.', verbose_name='Require Time Recorded?')),
                ('require_mod', models.BooleanField(default=False, help_text='Check this box to require a Date & Time for last modified element.', verbose_name='Require Time Modified?')),
                ('media_type', models.TextField(blank=True, help_text='The allowed Media Types (formerly known as MIME Types) of the included data, one per line; i.e. text/html', verbose_name='Media Type')),
                ('encoding', models.CharField(default='utf-8', help_text="<a href='http://www.iana.org/assignments/character-sets/character-sets.txt'>List of encoding types at IANA.</a>", max_length=10, verbose_name='encoding')),
                ('language', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='Choose the DEFAULT language of the content.', max_length=40, verbose_name='default language')),
                ('alt_txt', models.CharField(blank=True, help_text='Default alternative text label to display when the content cannot be displayed.', max_length=110, verbose_name='Alt. Text')),
                ('content_mode', models.CharField(choices=[('select', 'Select Mode:'), ('url', 'Link via a URL'), ('text', 'Embed a text file'), ('binary', 'Embed a binary file')], default='Select Mode:', help_text='Select how the content will referenced, either via a URL or included in the data instance. Example text is; XML, JSON, SQL, etc. Example binary is; MP#, MP4, PNG, etc.', max_length=6, verbose_name='Content Mode')),
                ('creator', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='xdfile_related_creator', to='dmgen.Modeler', verbose_name='Creator')),
                ('edited_by', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='xdfile_related_edited_by', to='dmgen.Modeler', verbose_name='Last Edited By')),
                ('pred_obj', models.ManyToManyField(help_text='Select or create a new set of Predicate Object combinations as semantic links.', to='dmgen.PredObj', verbose_name='Predicate - Object')),
                ('project', models.ForeignKey(help_text='Choose the name of your Project.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='Project Name')),
            ],
            options={
                'verbose_name': 'File',
                'ordering': ['project', 'label'],
            },
        ),
        migrations.CreateModel(
            name='XdInterval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='A human readable label used to identify this model in DMGEN.', max_length=110, verbose_name='label')),
                ('ct_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this MC.', unique=True, verbose_name='UUID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The dateTime that the MC was created.', verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update.', verbose_name='last updated')),
                ('published', models.BooleanField(default=False, help_text='Published must be a green check icon in order to use this in a DM. This is not user editable. It is managed by the publication process.', verbose_name='published')),
                ('description', models.TextField(help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the MC.', null=True, verbose_name='description')),
                ('schema_code', models.TextField(blank=True, default='', help_text='This is only writable from the DMGEN, not via user input. It contains the code required for each component to create an entry in a DM.', null=True, verbose_name='Schema Code')),
                ('asserts', models.TextField(blank=True, default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.', null=True, verbose_name='asserts')),
                ('lang', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='Choose the language of this MC.', max_length=40, verbose_name='language')),
                ('adapter_ctid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific XdAdapter complexType.', unique=True, verbose_name='Adapter UUID')),
                ('require_vtb', models.BooleanField(default=False, help_text='Check this box to require a Valid Time Begin element.', verbose_name='Require Valid Time Begin?')),
                ('require_vte', models.BooleanField(default=False, help_text='Check this box to require a Valid Time End element.', verbose_name='Require Valid Time End?')),
                ('require_tr', models.BooleanField(default=False, help_text='Check this box to require a Date & Time Recorded element.', verbose_name='Require Time Recorded?')),
                ('require_mod', models.BooleanField(default=False, help_text='Check this box to require a Date & Time for last modified element.', verbose_name='Require Time Modified?')),
                ('lower', models.CharField(blank=True, help_text='Enter the lower value of the interval. This will be used to set the minInclusive facet.', max_length=110, null=True, verbose_name='Lower Value')),
                ('upper', models.CharField(blank=True, help_text='Enter the upper value of the interval. This will be used to set the maxInclusive facet.', max_length=110, null=True, verbose_name='Upper Value')),
                ('interval_type', models.CharField(choices=[('None', 'Select Type:'), ('int', 'Count data (xs:int)'), ('decimal', 'Real set numbers (xs:decimal)'), ('float', 'Floating Point (xs:float)'), ('dateTime', 'Date/Time (YYYY-MM-DDTHH:mm:ss)'), ('date', 'Date (YYYY-MM-DD)'), ('time', 'Time (HH:mm:ss)'), ('duration', 'Duration (xs:duration)')], default='Select Type:', help_text='The XML Schema datatype of the upper and lower values.', max_length=20, verbose_name='Interval Type')),
                ('lower_included', models.BooleanField(default=True, help_text='Uncheck this box if the lower value is excluded in the interval', verbose_name='Lower Included?')),
                ('upper_included', models.BooleanField(default=True, help_text='Uncheck this box if the upper value is excluded in the interval', verbose_name='Upper Included?')),
                ('lower_bounded', models.BooleanField(default=True, help_text="Uncheck this box if the lower value is unbounded. If unchecked, instances must be set to xsi:nil='true'", verbose_name='Lower Bounded?')),
                ('upper_bounded', models.BooleanField(default=True, help_text="Uncheck this box if the lower value is unbounded. If unchecked, instances must be set to xsi:nil='true'", verbose_name='Upper Bounded?')),
                ('units_name', models.CharField(blank=True, help_text='OPTIONAL: Enter the common name or abbreviation for these units.', max_length=60, null=True, verbose_name='Units Name')),
                ('units_uri', models.URLField(blank=True, help_text='Enter the URL pointing to the definition for these units. This is mandatory if you entered a Units Name.', max_length=2000, null=True, verbose_name='Units URI')),
                ('creator', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='xdinterval_related_creator', to='dmgen.Modeler', verbose_name='Creator')),
                ('edited_by', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='xdinterval_related_edited_by', to='dmgen.Modeler', verbose_name='Last Edited By')),
                ('pred_obj', models.ManyToManyField(help_text='Select or create a new set of Predicate Object combinations as semantic links.', to='dmgen.PredObj', verbose_name='Predicate - Object')),
                ('project', models.ForeignKey(help_text='Choose the name of your Project.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='Project Name')),
            ],
            options={
                'verbose_name': 'Interval',
                'ordering': ['project', 'label'],
            },
        ),
        migrations.CreateModel(
            name='XdLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='A human readable label used to identify this model in DMGEN.', max_length=110, verbose_name='label')),
                ('ct_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this MC.', unique=True, verbose_name='UUID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The dateTime that the MC was created.', verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update.', verbose_name='last updated')),
                ('published', models.BooleanField(default=False, help_text='Published must be a green check icon in order to use this in a DM. This is not user editable. It is managed by the publication process.', verbose_name='published')),
                ('description', models.TextField(help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the MC.', null=True, verbose_name='description')),
                ('schema_code', models.TextField(blank=True, default='', help_text='This is only writable from the DMGEN, not via user input. It contains the code required for each component to create an entry in a DM.', null=True, verbose_name='Schema Code')),
                ('asserts', models.TextField(blank=True, default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.', null=True, verbose_name='asserts')),
                ('lang', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='Choose the language of this MC.', max_length=40, verbose_name='language')),
                ('adapter_ctid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific XdAdapter complexType.', unique=True, verbose_name='Adapter UUID')),
                ('require_vtb', models.BooleanField(default=False, help_text='Check this box to require a Valid Time Begin element.', verbose_name='Require Valid Time Begin?')),
                ('require_vte', models.BooleanField(default=False, help_text='Check this box to require a Valid Time End element.', verbose_name='Require Valid Time End?')),
                ('require_tr', models.BooleanField(default=False, help_text='Check this box to require a Date & Time Recorded element.', verbose_name='Require Time Recorded?')),
                ('require_mod', models.BooleanField(default=False, help_text='Check this box to require a Date & Time for last modified element.', verbose_name='Require Time Modified?')),
                ('relation', models.CharField(help_text="The relationship describing the link. Usually constrained by an ontology such as <a href='https://github.com/oborel/obo-relations'>OBO RO</a>.", max_length=110, verbose_name='relation')),
                ('relation_uri', models.CharField(help_text='The relationship URI. Points to the vocabulary, ontology, etc that provides the relation.', max_length=255, verbose_name='relation URI')),
                ('creator', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='xdlink_related_creator', to='dmgen.Modeler', verbose_name='Creator')),
                ('edited_by', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='xdlink_related_edited_by', to='dmgen.Modeler', verbose_name='Last Edited By')),
                ('pred_obj', models.ManyToManyField(help_text='Select or create a new set of Predicate Object combinations as semantic links.', to='dmgen.PredObj', verbose_name='Predicate - Object')),
                ('project', models.ForeignKey(help_text='Choose the name of your Project.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='Project Name')),
            ],
            options={
                'verbose_name': 'Link',
                'verbose_name_plural': 'Links',
                'ordering': ['project', 'label'],
            },
        ),
        migrations.CreateModel(
            name='XdOrdinal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='A human readable label used to identify this model in DMGEN.', max_length=110, verbose_name='label')),
                ('ct_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this MC.', unique=True, verbose_name='UUID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The dateTime that the MC was created.', verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update.', verbose_name='last updated')),
                ('published', models.BooleanField(default=False, help_text='Published must be a green check icon in order to use this in a DM. This is not user editable. It is managed by the publication process.', verbose_name='published')),
                ('description', models.TextField(help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the MC.', null=True, verbose_name='description')),
                ('schema_code', models.TextField(blank=True, default='', help_text='This is only writable from the DMGEN, not via user input. It contains the code required for each component to create an entry in a DM.', null=True, verbose_name='Schema Code')),
                ('asserts', models.TextField(blank=True, default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.', null=True, verbose_name='asserts')),
                ('lang', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='Choose the language of this MC.', max_length=40, verbose_name='language')),
                ('adapter_ctid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific XdAdapter complexType.', unique=True, verbose_name='Adapter UUID')),
                ('require_vtb', models.BooleanField(default=False, help_text='Check this box to require a Valid Time Begin element.', verbose_name='Require Valid Time Begin?')),
                ('require_vte', models.BooleanField(default=False, help_text='Check this box to require a Valid Time End element.', verbose_name='Require Valid Time End?')),
                ('require_tr', models.BooleanField(default=False, help_text='Check this box to require a Date & Time Recorded element.', verbose_name='Require Time Recorded?')),
                ('require_mod', models.BooleanField(default=False, help_text='Check this box to require a Date & Time for last modified element.', verbose_name='Require Time Modified?')),
                ('normal_status', models.CharField(blank=True, help_text='Enter text that indicates a normal status. Example: This should be a Symbol in a XdOrdinal, a date range in a XdTemporal, a value range in a XdCount, etc.', max_length=110, null=True, verbose_name='normal status')),
                ('ordinals', models.TextField(help_text='Enter the ordered enumeration of values. The base integer is zero with any number of integer values used to order the symbols. Example A: 0 = Trace, 1 = +, 2 = ++, 3 = +++, etc. Example B: 0 = Mild, 1 = Moderate, 2 = Severe. One per line.', verbose_name='ordinals')),
                ('symbols', models.TextField(help_text="Enter the symbols or the text that represent the ordinal values, which may be strings made from '+' symbols, or other enumerations of terms such as 'mild', 'moderate', 'severe', or even the same number series used for the ordinal values, e.g. '1', '2', '3'.. One per line.", verbose_name='symbols')),
                ('annotations', models.TextField(blank=True, help_text='Enter a URI for as a definition for each symbol. One per line. If the URI is the same for each symbol then just put it on the first line.', verbose_name='Symbols Definitions')),
                ('creator', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='xdordinal_related_creator', to='dmgen.Modeler', verbose_name='Creator')),
                ('edited_by', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='xdordinal_related_edited_by', to='dmgen.Modeler', verbose_name='Last Edited By')),
                ('pred_obj', models.ManyToManyField(help_text='Select or create a new set of Predicate Object combinations as semantic links.', to='dmgen.PredObj', verbose_name='Predicate - Object')),
                ('project', models.ForeignKey(help_text='Choose the name of your Project.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='Project Name')),
                ('reference_ranges', models.ManyToManyField(blank=True, help_text='Select the appropriate ReferenceRange that defines each ordered value. The listing is by Project: Reference Range Name.', to='dmgen.ReferenceRange', verbose_name='reference ranges')),
                ('simple_rr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dmgen.SimpleReferenceRange', verbose_name='Reference Range (Simple)')),
            ],
            options={
                'verbose_name': 'Ordinal',
                'ordering': ['project', 'label'],
            },
        ),
        migrations.CreateModel(
            name='XdQuantity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='A human readable label used to identify this model in DMGEN.', max_length=110, verbose_name='label')),
                ('ct_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this MC.', unique=True, verbose_name='UUID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The dateTime that the MC was created.', verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update.', verbose_name='last updated')),
                ('published', models.BooleanField(default=False, help_text='Published must be a green check icon in order to use this in a DM. This is not user editable. It is managed by the publication process.', verbose_name='published')),
                ('description', models.TextField(help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the MC.', null=True, verbose_name='description')),
                ('schema_code', models.TextField(blank=True, default='', help_text='This is only writable from the DMGEN, not via user input. It contains the code required for each component to create an entry in a DM.', null=True, verbose_name='Schema Code')),
                ('asserts', models.TextField(blank=True, default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.', null=True, verbose_name='asserts')),
                ('lang', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='Choose the language of this MC.', max_length=40, verbose_name='language')),
                ('adapter_ctid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific XdAdapter complexType.', unique=True, verbose_name='Adapter UUID')),
                ('require_vtb', models.BooleanField(default=False, help_text='Check this box to require a Valid Time Begin element.', verbose_name='Require Valid Time Begin?')),
                ('require_vte', models.BooleanField(default=False, help_text='Check this box to require a Valid Time End element.', verbose_name='Require Valid Time End?')),
                ('require_tr', models.BooleanField(default=False, help_text='Check this box to require a Date & Time Recorded element.', verbose_name='Require Time Recorded?')),
                ('require_mod', models.BooleanField(default=False, help_text='Check this box to require a Date & Time for last modified element.', verbose_name='Require Time Modified?')),
                ('normal_status', models.CharField(blank=True, help_text='Enter text that indicates a normal status. Example: This should be a Symbol in a XdOrdinal, a date range in a XdTemporal, a value range in a XdCount, etc.', max_length=110, null=True, verbose_name='normal status')),
                ('min_magnitude', models.DecimalField(blank=True, decimal_places=5, help_text="The minimum allowed value for a magnitude. If there isn't a min. then leave blank.", max_digits=10, null=True, verbose_name='minimum magnitude')),
                ('max_magnitude', models.DecimalField(blank=True, decimal_places=5, help_text="Any maximum allowed value. If there isn't a max. then leave blank.", max_digits=10, null=True, verbose_name='maximum magnitude')),
                ('min_inclusive', models.DecimalField(blank=True, decimal_places=5, help_text='Enter the minimum (inclusive) value for this concept.', max_digits=10, null=True, verbose_name='minimum inclusive')),
                ('max_inclusive', models.DecimalField(blank=True, decimal_places=5, help_text='Enter the maximum (inclusive) value for this concept.', max_digits=10, null=True, verbose_name='maximum inclusive')),
                ('min_exclusive', models.DecimalField(blank=True, decimal_places=5, help_text='Enter the minimum (exclusive) value for this concept.', max_digits=10, null=True, verbose_name='minimum exclusive')),
                ('max_exclusive', models.DecimalField(blank=True, decimal_places=5, help_text='Enter the maximum (exclusive) value for this concept.', max_digits=10, null=True, verbose_name='maximum exclusive')),
                ('total_digits', models.IntegerField(blank=True, help_text='Enter the maximum number of digits for this concept, excluding the decimal separator and the decimal places.', null=True, verbose_name='total digits')),
                ('fraction_digits', models.IntegerField(blank=True, help_text='Enter the maximum number of decimal places.', null=True, verbose_name='fraction digits')),
                ('creator', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='xdquantity_related_creator', to='dmgen.Modeler', verbose_name='Creator')),
                ('edited_by', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='xdquantity_related_edited_by', to='dmgen.Modeler', verbose_name='Last Edited By')),
                ('pred_obj', models.ManyToManyField(help_text='Select or create a new set of Predicate Object combinations as semantic links.', to='dmgen.PredObj', verbose_name='Predicate - Object')),
                ('project', models.ForeignKey(help_text='Choose the name of your Project.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='Project Name')),
                ('reference_ranges', models.ManyToManyField(blank=True, help_text='Select the appropriate ReferenceRange that defines each ordered value. The listing is by Project: Reference Range Name.', to='dmgen.ReferenceRange', verbose_name='reference ranges')),
                ('simple_rr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dmgen.SimpleReferenceRange', verbose_name='Reference Range (Simple)')),
                ('units', models.ForeignKey(help_text='Choose a units of measurement of this concept.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='xdquantity_related_units', to='dmgen.Units', verbose_name='units')),
            ],
            options={
                'verbose_name': 'Quantity',
                'verbose_name_plural': 'Quantities',
                'ordering': ['project', 'label'],
            },
        ),
        migrations.CreateModel(
            name='XdRatio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='A human readable label used to identify this model in DMGEN.', max_length=110, verbose_name='label')),
                ('ct_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this MC.', unique=True, verbose_name='UUID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The dateTime that the MC was created.', verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update.', verbose_name='last updated')),
                ('published', models.BooleanField(default=False, help_text='Published must be a green check icon in order to use this in a DM. This is not user editable. It is managed by the publication process.', verbose_name='published')),
                ('description', models.TextField(help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the MC.', null=True, verbose_name='description')),
                ('schema_code', models.TextField(blank=True, default='', help_text='This is only writable from the DMGEN, not via user input. It contains the code required for each component to create an entry in a DM.', null=True, verbose_name='Schema Code')),
                ('asserts', models.TextField(blank=True, default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.', null=True, verbose_name='asserts')),
                ('lang', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='Choose the language of this MC.', max_length=40, verbose_name='language')),
                ('adapter_ctid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific XdAdapter complexType.', unique=True, verbose_name='Adapter UUID')),
                ('require_vtb', models.BooleanField(default=False, help_text='Check this box to require a Valid Time Begin element.', verbose_name='Require Valid Time Begin?')),
                ('require_vte', models.BooleanField(default=False, help_text='Check this box to require a Valid Time End element.', verbose_name='Require Valid Time End?')),
                ('require_tr', models.BooleanField(default=False, help_text='Check this box to require a Date & Time Recorded element.', verbose_name='Require Time Recorded?')),
                ('require_mod', models.BooleanField(default=False, help_text='Check this box to require a Date & Time for last modified element.', verbose_name='Require Time Modified?')),
                ('normal_status', models.CharField(blank=True, help_text='Enter text that indicates a normal status. Example: This should be a Symbol in a XdOrdinal, a date range in a XdTemporal, a value range in a XdCount, etc.', max_length=110, null=True, verbose_name='normal status')),
                ('min_magnitude', models.DecimalField(blank=True, decimal_places=5, help_text="The minimum allowed value for a magnitude. If there isn't a min. then leave blank.", max_digits=10, null=True, verbose_name='minimum magnitude')),
                ('max_magnitude', models.DecimalField(blank=True, decimal_places=5, help_text="Any maximum allowed value. If there isn't a max. then leave blank.", max_digits=10, null=True, verbose_name='maximum magnitude')),
                ('min_inclusive', models.DecimalField(blank=True, decimal_places=5, help_text='Enter the minimum (inclusive) value for this concept.', max_digits=10, null=True, verbose_name='minimum inclusive')),
                ('max_inclusive', models.DecimalField(blank=True, decimal_places=5, help_text='Enter the maximum (inclusive) value for this concept.', max_digits=10, null=True, verbose_name='maximum inclusive')),
                ('min_exclusive', models.DecimalField(blank=True, decimal_places=5, help_text='Enter the minimum (exclusive) value for this concept.', max_digits=10, null=True, verbose_name='minimum exclusive')),
                ('max_exclusive', models.DecimalField(blank=True, decimal_places=5, help_text='Enter the maximum (exclusive) value for this concept.', max_digits=10, null=True, verbose_name='maximum exclusive')),
                ('total_digits', models.IntegerField(blank=True, help_text='Enter the maximum number of digits for this concept, excluding the decimal separator and the decimal places.', null=True, verbose_name='total digits')),
                ('ratio_type', models.CharField(choices=[('ratio', 'Ratio'), ('proportion', 'Proportion'), ('rate', 'Rate')], max_length=10, verbose_name='ratio type')),
                ('num_min_inclusive', models.IntegerField(blank=True, help_text='Enter the minimum (inclusive) value for the numerator.', null=True, verbose_name='numerator minimum inclusive')),
                ('num_max_inclusive', models.IntegerField(blank=True, help_text='Enter the maximum (inclusive) value for the numerator.', null=True, verbose_name='numerator maximum inclusive')),
                ('num_min_exclusive', models.IntegerField(blank=True, help_text='Enter the minimum (exclusive) value for the numerator.', null=True, verbose_name='numerator minimum exclusive')),
                ('num_max_exclusive', models.IntegerField(blank=True, help_text='Enter the maximum (exclusive) value for the numerator.', null=True, verbose_name='numerator maximum exclusive')),
                ('den_min_inclusive', models.IntegerField(blank=True, help_text='Enter the minimum (inclusive) value for the denominator.', null=True, verbose_name='denominator minimum inclusive')),
                ('den_max_inclusive', models.IntegerField(blank=True, help_text='Enter the maximum (inclusive) value for the denominator.', null=True, verbose_name='denominator maximum inclusive')),
                ('den_min_exclusive', models.IntegerField(blank=True, help_text='Enter the minimum (exclusive) value for the denominator.', null=True, verbose_name='denominator minimum exclusive')),
                ('den_max_exclusive', models.IntegerField(blank=True, help_text='Enter the maximum (exclusive) value for the denominator.', null=True, verbose_name='denominator maximum exclusive')),
                ('creator', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='xdratio_related_creator', to='dmgen.Modeler', verbose_name='Creator')),
                ('den_units', models.ForeignKey(blank=True, help_text='Choose a units of measurement of this concept.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='xdratio_related_den_units', to='dmgen.Units', verbose_name='units')),
                ('edited_by', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='xdratio_related_edited_by', to='dmgen.Modeler', verbose_name='Last Edited By')),
                ('num_units', models.ForeignKey(blank=True, help_text='Choose a units of measurement of this concept.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='xdratio_related_num_units', to='dmgen.Units', verbose_name='units')),
                ('pred_obj', models.ManyToManyField(help_text='Select or create a new set of Predicate Object combinations as semantic links.', to='dmgen.PredObj', verbose_name='Predicate - Object')),
                ('project', models.ForeignKey(help_text='Choose the name of your Project.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='Project Name')),
                ('ratio_units', models.ForeignKey(blank=True, help_text='Choose a units of measurement of this concept.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='xdratio_related_ratio_units', to='dmgen.Units', verbose_name='units')),
                ('reference_ranges', models.ManyToManyField(blank=True, help_text='Select the appropriate ReferenceRange that defines each ordered value. The listing is by Project: Reference Range Name.', to='dmgen.ReferenceRange', verbose_name='reference ranges')),
                ('simple_rr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dmgen.SimpleReferenceRange', verbose_name='Reference Range (Simple)')),
            ],
            options={
                'verbose_name': 'Ratio',
                'ordering': ['project', 'label'],
            },
        ),
        migrations.CreateModel(
            name='XdString',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='A human readable label used to identify this model in DMGEN.', max_length=110, verbose_name='label')),
                ('ct_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this MC.', unique=True, verbose_name='UUID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The dateTime that the MC was created.', verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update.', verbose_name='last updated')),
                ('published', models.BooleanField(default=False, help_text='Published must be a green check icon in order to use this in a DM. This is not user editable. It is managed by the publication process.', verbose_name='published')),
                ('description', models.TextField(help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the MC.', null=True, verbose_name='description')),
                ('schema_code', models.TextField(blank=True, default='', help_text='This is only writable from the DMGEN, not via user input. It contains the code required for each component to create an entry in a DM.', null=True, verbose_name='Schema Code')),
                ('asserts', models.TextField(blank=True, default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.', null=True, verbose_name='asserts')),
                ('lang', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='Choose the language of this MC.', max_length=40, verbose_name='language')),
                ('adapter_ctid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific XdAdapter complexType.', unique=True, verbose_name='Adapter UUID')),
                ('require_vtb', models.BooleanField(default=False, help_text='Check this box to require a Valid Time Begin element.', verbose_name='Require Valid Time Begin?')),
                ('require_vte', models.BooleanField(default=False, help_text='Check this box to require a Valid Time End element.', verbose_name='Require Valid Time End?')),
                ('require_tr', models.BooleanField(default=False, help_text='Check this box to require a Date & Time Recorded element.', verbose_name='Require Time Recorded?')),
                ('require_mod', models.BooleanField(default=False, help_text='Check this box to require a Date & Time for last modified element.', verbose_name='Require Time Modified?')),
                ('min_length', models.IntegerField(blank=True, help_text='Enter the minimum number of characters that are required for this string. If the character is optional, leave it blank.', null=True, verbose_name='minimum length')),
                ('max_length', models.IntegerField(blank=True, help_text='Enter the maximum number of characters that are required for this string. If the character is optional, leave it blank.', null=True, verbose_name='maximum length')),
                ('exact_length', models.IntegerField(blank=True, help_text='Enter the exact length of the string. It should be defined only when the number of characters is always fixed (e.g. codes and identifiers).', null=True, verbose_name='exact length')),
                ('enums', models.TextField(blank=True, help_text='Enter the set of values of the string (e.g.Male,Female). One per line.', verbose_name='enumerations')),
                ('definitions', models.TextField(blank=True, help_text='Enter a URI (prefereable a URL) defining each enumeration. One per line. If the URI is the same for each enumeration then just put it on the first line.', verbose_name='enumeration definitions')),
                ('def_val', models.CharField(blank=True, help_text="Enter a default value (up to 255 characters) for the string if desired. Cannot contain 'http://' nor 'https://'", max_length=255, verbose_name='default value')),
                ('creator', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='xdstring_related_creator', to='dmgen.Modeler', verbose_name='Creator')),
                ('edited_by', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='xdstring_related_edited_by', to='dmgen.Modeler', verbose_name='Last Edited By')),
                ('pred_obj', models.ManyToManyField(help_text='Select or create a new set of Predicate Object combinations as semantic links.', to='dmgen.PredObj', verbose_name='Predicate - Object')),
                ('project', models.ForeignKey(help_text='Choose the name of your Project.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='Project Name')),
            ],
            options={
                'verbose_name': 'String',
                'verbose_name_plural': 'Strings',
                'ordering': ['project', 'label'],
            },
        ),
        migrations.CreateModel(
            name='XdTemporal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='A human readable label used to identify this model in DMGEN.', max_length=110, verbose_name='label')),
                ('ct_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this MC.', unique=True, verbose_name='UUID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The dateTime that the MC was created.', verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update.', verbose_name='last updated')),
                ('published', models.BooleanField(default=False, help_text='Published must be a green check icon in order to use this in a DM. This is not user editable. It is managed by the publication process.', verbose_name='published')),
                ('description', models.TextField(help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the MC.', null=True, verbose_name='description')),
                ('schema_code', models.TextField(blank=True, default='', help_text='This is only writable from the DMGEN, not via user input. It contains the code required for each component to create an entry in a DM.', null=True, verbose_name='Schema Code')),
                ('asserts', models.TextField(blank=True, default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.', null=True, verbose_name='asserts')),
                ('lang', models.CharField(choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en-US', help_text='Choose the language of this MC.', max_length=40, verbose_name='language')),
                ('adapter_ctid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific XdAdapter complexType.', unique=True, verbose_name='Adapter UUID')),
                ('require_vtb', models.BooleanField(default=False, help_text='Check this box to require a Valid Time Begin element.', verbose_name='Require Valid Time Begin?')),
                ('require_vte', models.BooleanField(default=False, help_text='Check this box to require a Valid Time End element.', verbose_name='Require Valid Time End?')),
                ('require_tr', models.BooleanField(default=False, help_text='Check this box to require a Date & Time Recorded element.', verbose_name='Require Time Recorded?')),
                ('require_mod', models.BooleanField(default=False, help_text='Check this box to require a Date & Time for last modified element.', verbose_name='Require Time Modified?')),
                ('normal_status', models.CharField(blank=True, help_text='Enter text that indicates a normal status. Example: This should be a Symbol in a XdOrdinal, a date range in a XdTemporal, a value range in a XdCount, etc.', max_length=110, null=True, verbose_name='normal status')),
                ('allow_duration', models.BooleanField(default=False, help_text='If Duration is allowed, no other types will be permitted.', verbose_name='allow duration')),
                ('allow_ymduration', models.BooleanField(default=False, help_text='If yearMonthDuration is allowed, no other types will be permitted.', verbose_name='allow yearMonthDuration')),
                ('allow_dtduration', models.BooleanField(default=False, help_text='If dayTimeDuration is allowed, no other types will be permitted.', verbose_name='allow dayTimeDuration')),
                ('allow_date', models.BooleanField(default=False, help_text='Check this box if complete date entry is allowed.', verbose_name='allow date')),
                ('allow_time', models.BooleanField(default=False, help_text='Check this box if time only entry is allowed.', verbose_name='allow time')),
                ('allow_datetime', models.BooleanField(default=False, help_text='Check this box if complete dates and times are allowed.', verbose_name='allow datetime')),
                ('allow_datetimestamp', models.BooleanField(default=False, help_text='Check this box if a dateTimeStamp is allowed.', verbose_name='allow datetimestamp')),
                ('allow_day', models.BooleanField(default=False, help_text='Check this box if day only is allowed.', verbose_name='allow day')),
                ('allow_month', models.BooleanField(default=False, help_text='Check this box if month only is allowed.', verbose_name='allow month')),
                ('allow_year', models.BooleanField(default=False, help_text='Check this box if year only entry is allowed.', verbose_name='allow year')),
                ('allow_year_month', models.BooleanField(default=False, help_text='Check this box if combination of years and months are allowed.', verbose_name='allow year month')),
                ('allow_month_day', models.BooleanField(default=False, help_text='Check this box if combination of months and days are allowed.', verbose_name='allow month day')),
                ('creator', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='xdtemporal_related_creator', to='dmgen.Modeler', verbose_name='Creator')),
                ('edited_by', models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='xdtemporal_related_edited_by', to='dmgen.Modeler', verbose_name='Last Edited By')),
                ('pred_obj', models.ManyToManyField(help_text='Select or create a new set of Predicate Object combinations as semantic links.', to='dmgen.PredObj', verbose_name='Predicate - Object')),
                ('project', models.ForeignKey(help_text='Choose the name of your Project.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='Project Name')),
                ('reference_ranges', models.ManyToManyField(blank=True, help_text='Select the appropriate ReferenceRange that defines each ordered value. The listing is by Project: Reference Range Name.', to='dmgen.ReferenceRange', verbose_name='reference ranges')),
                ('simple_rr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dmgen.SimpleReferenceRange', verbose_name='Reference Range (Simple)')),
            ],
            options={
                'verbose_name': 'Temporal',
                'ordering': ['project', 'label'],
            },
        ),
        migrations.AddField(
            model_name='referencerange',
            name='interval',
            field=models.ForeignKey(help_text='The data range for this meaning. Select the appropriate XdInterval.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.XdInterval', verbose_name='interval'),
        ),
        migrations.AddField(
            model_name='referencerange',
            name='pred_obj',
            field=models.ManyToManyField(help_text='Select or create a new set of Predicate Object combinations as semantic links.', to='dmgen.PredObj', verbose_name='Predicate - Object'),
        ),
        migrations.AddField(
            model_name='referencerange',
            name='project',
            field=models.ForeignKey(help_text='Choose the name of your Project.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='predobj',
            name='project',
            field=models.ForeignKey(help_text='Choose the name of the Project.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='party',
            name='external_ref',
            field=models.ManyToManyField(blank=True, help_text='Optional XdLink(s) that point to a description of this Party in other services.', related_name='party_related', to='dmgen.XdLink', verbose_name='external reference'),
        ),
        migrations.AddField(
            model_name='party',
            name='pred_obj',
            field=models.ManyToManyField(help_text='Select or create a new set of Predicate Object combinations as semantic links.', to='dmgen.PredObj', verbose_name='Predicate - Object'),
        ),
        migrations.AddField(
            model_name='party',
            name='project',
            field=models.ForeignKey(help_text='Choose the name of your Project.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='participation',
            name='function',
            field=models.ForeignKey(help_text='The function of the Party in this participation (note that a given party might participate in more than one way in a particular activity). In some applications this might be called a Role.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='participation_related', to='dmgen.XdString'),
        ),
        migrations.AddField(
            model_name='participation',
            name='mode',
            field=models.ForeignKey(help_text='The mode of the performer / activity interaction, e.g. present, by telephone, by email etc. If the participation is by device or software it may contain a protocol standard or interface definition.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='participation_related_mode', to='dmgen.XdString'),
        ),
        migrations.AddField(
            model_name='participation',
            name='performer',
            field=models.ForeignKey(help_text='The Party instance and possibly demographic system link of the party participating in the activity.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='participation_related_performer', to='dmgen.Party', verbose_name='Performer'),
        ),
        migrations.AddField(
            model_name='participation',
            name='pred_obj',
            field=models.ManyToManyField(help_text='Select or create a new set of Predicate Object combinations as semantic links.', to='dmgen.PredObj', verbose_name='Predicate - Object'),
        ),
        migrations.AddField(
            model_name='participation',
            name='project',
            field=models.ForeignKey(help_text='Choose the name of your Project.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='modeler',
            name='project',
            field=models.ForeignKey(blank=True, help_text='Choose the default Project.', null=True, on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='Default Project'),
        ),
        migrations.AddField(
            model_name='modeler',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entry',
            name='creator',
            field=models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='entry_related_creator', to='dmgen.Modeler', verbose_name='Creator'),
        ),
        migrations.AddField(
            model_name='entry',
            name='data',
            field=models.ForeignKey(help_text='You must select the Cluster that is the structure for this Entry.', on_delete=django.db.models.deletion.CASCADE, related_name='entry_related', to='dmgen.Cluster', verbose_name='entry data'),
        ),
        migrations.AddField(
            model_name='entry',
            name='edited_by',
            field=models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='entry_related_edited_by', to='dmgen.Modeler', verbose_name='Last Edited By'),
        ),
        migrations.AddField(
            model_name='entry',
            name='links',
            field=models.ManyToManyField(blank=True, default=None, help_text='Can be used to establish ad-hoc links between concepts.', related_name='entry_related_links', to='dmgen.XdLink', verbose_name='links'),
        ),
        migrations.AddField(
            model_name='entry',
            name='participations',
            field=models.ManyToManyField(blank=True, help_text='Select any Participations that describe additional entities involved in this Entry.', to='dmgen.Participation', verbose_name='other participations'),
        ),
        migrations.AddField(
            model_name='entry',
            name='pred_obj',
            field=models.ManyToManyField(help_text='Select or create a new set of Predicate Object combinations as semantic links.', to='dmgen.PredObj', verbose_name='Predicate - Object'),
        ),
        migrations.AddField(
            model_name='entry',
            name='project',
            field=models.ForeignKey(help_text='Choose the name of your Project.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='entry',
            name='protocol',
            field=models.ForeignKey(blank=True, help_text='Optional external identifier of protocol used to create this Entry.  This could be a clinical guideline, an operations protocol,etc.', null=True, on_delete=django.db.models.deletion.CASCADE, to='dmgen.XdString', verbose_name='protocol id'),
        ),
        migrations.AddField(
            model_name='entry',
            name='provider',
            field=models.ForeignKey(blank=True, help_text='Select a Party that is the provider of the activity in this Entry.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entry_related_provider', to='dmgen.Party', verbose_name='entry provider'),
        ),
        migrations.AddField(
            model_name='entry',
            name='subject',
            field=models.ForeignKey(blank=True, help_text='Refers to the subject of the record for anonymous or identified reference.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entry_related_subject', to='dmgen.Party', verbose_name='entry subject'),
        ),
        migrations.AddField(
            model_name='entry',
            name='workflow',
            field=models.ForeignKey(blank=True, help_text='Identifier of externally held workflow engine (state machine) data for this workflow execution.', null=True, on_delete=django.db.models.deletion.CASCADE, to='dmgen.XdLink', verbose_name='workflow id'),
        ),
        migrations.AddField(
            model_name='dm',
            name='author',
            field=models.ForeignKey(help_text='Select the author of the DM', on_delete=django.db.models.deletion.CASCADE, related_name='dm_related_author', to='dmgen.Modeler', verbose_name='Author'),
        ),
        migrations.AddField(
            model_name='dm',
            name='contrib',
            field=models.ManyToManyField(blank=True, help_text='Select the contributors (if any) to this DM', related_name='dm_related_contrib', to='dmgen.Modeler', verbose_name='Contributors'),
        ),
        migrations.AddField(
            model_name='dm',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dm_related_creator', to='dmgen.Modeler', verbose_name='Creator'),
        ),
        migrations.AddField(
            model_name='dm',
            name='edited_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dm_related_edited_by', to='dmgen.Modeler', verbose_name='Last Edited By'),
        ),
        migrations.AddField(
            model_name='dm',
            name='entry',
            field=models.ForeignKey(help_text='Select the correct Entry for this DM.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Entry', verbose_name='entry'),
        ),
        migrations.AddField(
            model_name='dm',
            name='pred_obj',
            field=models.ManyToManyField(help_text='Select or create a new set of Predicate Object combinations as semantic links.', to='dmgen.PredObj', verbose_name='Predicate - Object'),
        ),
        migrations.AddField(
            model_name='dm',
            name='project',
            field=models.ForeignKey(help_text='Choose a Project for this Data Model (DM)', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='project name'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='creator',
            field=models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='cluster_related_creator', to='dmgen.Modeler', verbose_name='Creator'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='edited_by',
            field=models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='cluster_related_edited_by', to='dmgen.Modeler', verbose_name='Last Edited By'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='pred_obj',
            field=models.ManyToManyField(help_text='Select or create a new set of Predicate Object combinations as semantic links.', to='dmgen.PredObj', verbose_name='Predicate - Object'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='project',
            field=models.ForeignKey(help_text='Choose the name of your Project.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='xdboolean',
            field=models.ManyToManyField(blank=True, help_text='Select zero or more booleans to include in this Cluster.', related_name='cluster_related', to='dmgen.XdBoolean'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='xdcount',
            field=models.ManyToManyField(blank=True, help_text='Select zero or more counts to include in this Cluster.', related_name='cluster_related', to='dmgen.XdCount'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='xdfile',
            field=models.ManyToManyField(blank=True, help_text='Select zero or more media items to include in this Cluster.', related_name='cluster_related', to='dmgen.XdFile'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='xdlink',
            field=models.ManyToManyField(blank=True, help_text='Select zero or more uris to include in this Cluster.', related_name='cluster_related', to='dmgen.XdLink'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='xdordinal',
            field=models.ManyToManyField(blank=True, help_text='Select zero or more ordinals to include in this Cluster.', related_name='cluster_related', to='dmgen.XdOrdinal'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='xdquantity',
            field=models.ManyToManyField(blank=True, help_text='Select zero or more quantity items to include in this Cluster.', related_name='cluster_related', to='dmgen.XdQuantity'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='xdratio',
            field=models.ManyToManyField(blank=True, help_text='Select zero or more ratios to include in this Cluster.', related_name='cluster_related', to='dmgen.XdRatio'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='xdstring',
            field=models.ManyToManyField(blank=True, help_text='Select zero or more strings to include in this Cluster.', related_name='cluster_related', to='dmgen.XdString'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='xdtemporal',
            field=models.ManyToManyField(blank=True, help_text='Select zero or more temporal items to include in this Cluster.', related_name='cluster_related', to='dmgen.XdTemporal'),
        ),
        migrations.AddField(
            model_name='audit',
            name='creator',
            field=models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='audit_related_creator', to='dmgen.Modeler', verbose_name='Creator'),
        ),
        migrations.AddField(
            model_name='audit',
            name='edited_by',
            field=models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='audit_related_edited_by', to='dmgen.Modeler', verbose_name='Last Edited By'),
        ),
        migrations.AddField(
            model_name='audit',
            name='location',
            field=models.ForeignKey(blank=True, help_text='A Cluster for location information.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='audit_related', to='dmgen.Cluster', verbose_name='location'),
        ),
        migrations.AddField(
            model_name='audit',
            name='pred_obj',
            field=models.ManyToManyField(help_text='Select or create a new set of Predicate Object combinations as semantic links.', to='dmgen.PredObj', verbose_name='Predicate - Object'),
        ),
        migrations.AddField(
            model_name='audit',
            name='project',
            field=models.ForeignKey(help_text='Choose the name of your Project.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='audit',
            name='system_id',
            field=models.ForeignKey(blank=True, help_text='Identifier of the system which handled the information item.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='audit_related', to='dmgen.XdString', verbose_name='system id'),
        ),
        migrations.AddField(
            model_name='audit',
            name='system_user',
            field=models.ForeignKey(blank=True, help_text='A model for user(s) who created, committed, forwarded or otherwise handled the item.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='audit_related', to='dmgen.Party', verbose_name='system user'),
        ),
        migrations.AddField(
            model_name='attestation',
            name='committer',
            field=models.ForeignKey(blank=True, help_text='The Party that commited the Attestation.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attestation_related_committer', to='dmgen.Party', verbose_name='committer'),
        ),
        migrations.AddField(
            model_name='attestation',
            name='creator',
            field=models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='attestation_related_creator', to='dmgen.Modeler', verbose_name='Creator'),
        ),
        migrations.AddField(
            model_name='attestation',
            name='edited_by',
            field=models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.CASCADE, related_name='attestation_related_edited_by', to='dmgen.Modeler', verbose_name='Last Edited By'),
        ),
        migrations.AddField(
            model_name='attestation',
            name='pred_obj',
            field=models.ManyToManyField(help_text='Select or create a new set of Predicate Object combinations as semantic links.', to='dmgen.PredObj', verbose_name='Predicate - Object'),
        ),
        migrations.AddField(
            model_name='attestation',
            name='project',
            field=models.ForeignKey(help_text='Choose the name of your Project.', on_delete=django.db.models.deletion.CASCADE, to='dmgen.Project', to_field='prj_name', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='attestation',
            name='proof',
            field=models.ForeignKey(blank=True, help_text='Select a model for the proof of attestation such as an GPG signature.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='proof', to='dmgen.XdFile', verbose_name='proof'),
        ),
        migrations.AddField(
            model_name='attestation',
            name='reason',
            field=models.ForeignKey(blank=True, help_text='Select a model for the reason.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attestation_related', to='dmgen.XdString', verbose_name='reason'),
        ),
        migrations.AddField(
            model_name='attestation',
            name='view',
            field=models.ForeignKey(blank=True, help_text='Select a model for the recorded view that is being attested.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attested_view', to='dmgen.XdFile', verbose_name='attested view'),
        ),
    ]
